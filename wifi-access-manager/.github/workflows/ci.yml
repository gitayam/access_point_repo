name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgis/postgis:14-3.2
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: wifi_manager
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: wifi-access-manager/package-lock.json

    - name: Install dependencies
      working-directory: ./wifi-access-manager
      run: npm ci

    - name: Run backend type check
      working-directory: ./wifi-access-manager/backend
      run: npm run type-check || npx tsc --noEmit

    - name: Run backend linting
      working-directory: ./wifi-access-manager/backend
      run: npm run lint || npx eslint . --ext .ts,.tsx || true

    - name: Run database migrations
      working-directory: ./wifi-access-manager/backend
      env:
        DATABASE_URL: postgresql://user:password@localhost:5432/wifi_manager
        JWT_SECRET: test-secret-key
      run: npm run migrate || npx knex migrate:latest

  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: wifi-access-manager/package-lock.json

    - name: Install dependencies
      working-directory: ./wifi-access-manager
      run: npm ci

    - name: Run frontend type check
      working-directory: ./wifi-access-manager/frontend
      run: npm run type-check || npx tsc --noEmit

    - name: Run frontend linting
      working-directory: ./wifi-access-manager/frontend
      run: npm run lint || npx eslint . --ext .ts,.tsx || true

    - name: Build frontend
      working-directory: ./wifi-access-manager/frontend
      run: npm run build

  build-docker:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker images
      working-directory: ./wifi-access-manager
      run: docker-compose build

    - name: Test Docker compose
      working-directory: ./wifi-access-manager
      run: |
        docker-compose up -d
        sleep 10
        curl -f http://localhost:3001/health || exit 1
        curl -f http://localhost:8080 || exit 1
        docker-compose down

  deploy:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deployment step would go here"
        # Add your deployment commands here
        # Examples:
        # - SSH to server and pull latest code
        # - Push to container registry
        # - Deploy to Kubernetes
        # - Deploy to cloud service (AWS, GCP, Azure)